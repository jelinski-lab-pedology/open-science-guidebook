[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Open Science: Tools Applications, & Workflow",
    "section": "",
    "text": "This book outlines an open, standardize workflow for use on all projects in the Jelinski lab. With the diverse library of tools, apps, and digital repositories available to you as it as a researcher, it is extremely difficult to understand which ones to use and how to put together a workflow. My goal is to standardize workflow for all projects in our lab - or at the very least to provide a scaffold, foundational approach that everyone can borrow and modify from as best fits their needs. This is not so much meant to force you into a particular way of doing your thinking things, but rather to free you up to do what’s really important, the research. Making decisions about how to name files, what format and style to use for code, how to structure project files and folders, and what tools and apps to use is exhausting, and these decisions take you away from the science. The goal of this standardized workflow is to produce transparent, open science, that is easily reproducible, transparent, usable by others, and most importantly well organized and documented so that you and others can easily understand what you’ve done and how you’ve done it. There are a few principal concepts behind this workflow and how you can structure your work to be most productive:\n\n\nA major part of research is hitting dead ends, going down rabbit holes, and generally feeling like you might be wasting your time because it’s taking you so long two get to the correct analysis or perspective. However, none of this is waste of time. Every dead end is a door that has closed to allow you to find your path forward. It’s your job as a scientist and researcher to define and document those dead ass and not give up. Recognize that those that ends are part of the process, and make those dead ends work for you. By using a standardized workflow even those dead ends become reproducible transparent learning experiences that are documented fully for you and others to grow from.\n\n\n\nOne of my mentors as probationary faculty, Dr. Ed Nater, told me that a career in science “is a marathon, not a sprint”. Despite the modern urgency to publish as many papers as possible in a short amount of time, research still takes time. And often we don’t know exactly how long is gonna take. It’s better to do good science then to do fast science. Of course ideally we could do good, fast science. This workflow will help you do that - it will help you do good science, create transparent citeable and reproducible content, even from your unfinished drafts, dead ends, and false starts. Because research is not is a marathon and not a sprint, it is absolutely important that you take care of your whole being. This means taking care of your body and your mind. Let me tell you a story.\nAs an academic, most of us who are in this for the career work long hours. I’ve been working long hours overnights, 50 to 60 hours a week for as long as I can remember - this is normal in academia. I used to view this as “the grind”. I used to think that the answer to be more productive was just putting in more hours in the grind. If I could just stay up one more night, push through for three more hours, sit at my desk for 10-12 hours in a day, and work work work, I could produce more. What I realized as I’ve reached the middle of my career is that there are more ways to produce more which also allow you to be healthier than just grinding the large number of hours. Certainly hours are important, for example you probably are not gonna publish a research paper write a thesis write a dissertation or be successful in a faculty job without putting in more than 40 hours a week and some overnights. But, those should not be the norm. There are ways to design your life so that those are few and far between. Striving for a physical and mental balance is extremely important and my years of grinding have taken a toll. Although they have given me a lot, and I’ve been able to achieve tenure, looking back I now see how I could have changed my processes to work fewer hours, be more physically healthy and more mentally available for my friends and family, and produce more.\nMuch of this starts with prioritizing your physical health. You simply can’t reach your top productivity if you are not physically healthy because the mind-body connection is strong. Physical health is a cornerstone for long-term productivity in any career. And science is no different. After years of mucking through different processes, workflows, and trial and error, I’m finally starting to reach an understanding regarding how to construct these processes to reduce decision fatigue and be more productive, allow me more time to do more things outside of work and to take care of myself my family. This all involves standardization. Jocko Willink is famous for his mantra “Discipline Equals Freedom”. This mantra also holds true in creative work such as academia. Although it seems counterintuitive and potentially restricting at first, standardized processes actually allow you to do better, more creative, more reproducible, and more inspiring work. Note to insert references to dance, art and writers that have used standardized processes. This is because all of the small decisions that you make about, for example (just to name a few):\n\nWhat to name files how to create a structure in a folder,\nwhat app to use to do data analysis,\nhow to write and structure code,\n\nreduce your ability to focus on what really matters, generating data, analyzing data, the science and the writing. By standardizing workflows and processes, we relegate the trivial stuff to a trusted system This system is one that holds important information, and allows you to access it freely and readily, but makes all of the trivial decisions for you. This allows you to focus on just the information. It frees you to think more and more deeply about what really matters, to focus your time and effort outside of work on your physical and mental health.\n\n\n\n10 years ago, very few people were doing open science. Now with openscapes and a handful of other strong initiatives more and more people are doing open science in environmental fields. More journals require that you submit raw data, code or somehow package everything to make your analysis and results reproducible. This workflow will allow you to do that automatically as you build your project. When you get to the point of submitting a manuscript you will already have a citable online repository that you can point to when you submit your manuscript. This workflow also fosters a mindset of development and growth, where you “show your work” all the time. Showing your work all the time is a great way to:\n\nFoster collaboration,\nto be “constantly producing”, and\n\nto feel more accomplished feel that you can be “done” at the end of a workday day.\n\nIn the beginning you may find implementing this workflow to be slower, and at first there will be a learning curve. Also, fitting your project into a standardize workflow will cause you to work a bit slower at sometimes then you could if you didn’t have to fit in the standardize workflow. However after 18 years of managing projects and doing science, I can tell you the time effort and mental strain saved from having an organized, standardized, and open process and workflow will save you an incredible amount of time, but it can also provide you a strong foundation that you can carry into the future and never duplicate or backtrack on work you have already done. I can’t tell you how many times I’ve gone back to read a paper that I’ve read five times just to fit it into another reference, or to format a bibliography, or to make sense of code that I wrote just six months ago, or to update the class syllabus documents or find different versions of files that are scattered across my computer, in cloud storage, and named different things. As you go on your research career you will accumulate more and more of this baggage. If you start with a standardized workflow early in your career, this baggage will be manageable, well structured, available to you and others, and will actually promote a positive feedback loop whereby the work that you do now makes future work even easier.\n\n\n\nI am a traveler on this road as well. I do not have all of the answers, but I have spent time developing a system and set of tools that have begun to pay huge dividends in my work and personal life. I hope to share these lessons learned with you.\nI hope you will join me on this journey."
  },
  {
    "objectID": "intro.html",
    "href": "intro.html",
    "title": "Introduction",
    "section": "",
    "text": "Project Setup and “Pre”-Data\nRaw Data Collection\nRaw Data Curation & Data Production\nData Analysis and Interpretation\nWriting and External Products\nLong-Term Data Archiving and Storage\nX Notetaking Strategies\n\nNote that although these major components are listed in chronological order, they will likely not necessarily occur in distinct stages in your project. For example data analysis may begin with preliminary data and continue as you are writing drafts of manuscripts AND writing occurs across all of these components - writing actually begins with project setup as you will see. If you have a project idea, you can start writing! Thhis allows you to never start with a blank page\nTo execute this standardized workflow as described, it will be necessary for you to be familiar with and utilize the following tools:\n\nArcGIS Online: Survey123 (Proprietary - Free account available through UMN)\nObsidian (Open source)\nZotero (Open source)\nQGIS (Open source)\nR/RStudio (Open source)\nGitHub/GitHub Desktop (Proprietary - Free account available to anyone)\nGoogle Drive (Proprietary - Free account available to anyone, unlimited storage available through UMN)\nInkScape (Open source)\nHack MD (Proprietary - Free account available to anyone)\nnote to potentially include social professional sites like ResearchGate and Google Scholar + ORCID + X?\n\nThese are not a randomly selected group of tools - they are designed at every turn to allow deep integration and (as much as possible) free and open source usage. Although not all of these tools are open source (ArcGIS Online, GitHub, Google Drive, Hack MD) with the exception of ArcGIS Online, all of these tools have a free base level, which will be sufficient to execute this workflow. Additionally, because of UMN’s enterprise license with ArcGIS Online, all of those tools are available free to you.\nThese tools will require you to be fluent in the following languages:\n\nR (core language, critical skill)\nMarkdown (core language, critical skill)\nAlthough not required to execute this workflow, familiarity with Python, Javascript, and SQL might help you do more customization"
  },
  {
    "objectID": "project-setup.html",
    "href": "project-setup.html",
    "title": "Project Setup, Documentation, and “Pre-Data”",
    "section": "",
    "text": "This is the first part of any project, and can begin as soon as you have an idea - in fact, it is completely fine to set up a project that is just an idea, with no content yet. Just going through the setup process makes a project more “real” in your mind, and also gives you a structure to collect thoughts, ideas, and related information for future work, even before you are starting to work on a project in earnest. I’ve got many directories on my computer that are empty placeholders for wishlist projects years in the future."
  },
  {
    "objectID": "project-setup.html#project-setup",
    "href": "project-setup.html#project-setup",
    "title": "Project Setup, Documentation, and “Pre-Data”",
    "section": "Project Setup",
    "text": "Project Setup\nThis includes deciding what constitutes a “project” (this seems like it should be an easy thing, but it’s actually very difficult), how to generate a file and folder structure for your project before you even begin that lives and syncs across platforms. This setup is designed to work for all of the project types we deal with regardless of the initial data origin (i.e. field projects, laboratory projects, review or data compilation).\n\n\n\n\n\n\nRequired Tools - Project Setup\n\n\n\n\nA local folder structure on your personal computer\nGitHub/GitHub Desktop\nGoogle Drive\nZotero\nObsidian\nInkscape"
  },
  {
    "objectID": "para-system.html",
    "href": "para-system.html",
    "title": "1  Overview of the PARA system",
    "section": "",
    "text": "This workflow is designed around discrete units of work called projects and utilizes Tiago Forte’s PARA file structure and organization. The PARA system (Projects, Areas, Resources, and Archive) is an excellent place to start for organizing your files - if you don’t have strong feelings about how your work files are organized on your computer, I highly suggest starting with this. If you do have strong feelings, you can always adapt the system to something that works for you. Utilizing this system doesn’t necessarily commit you to going back and re-organizing all of your work files on your computer. Just start now, and build as you go and work on new projects. As you have time in the future, you can always go back and fit your previous work into this structure. However - see my notes on things to watch for when you go back to “refactor” your files and folder structure.\nThe most important thing is to start now; start today.\nThe second most important thing is to use the same structure across apps, platforms, and languages, which will allow deep integration and ensure you always know where everything is. You will spend less time trying to find for example, a small test R script you wrote last year or that interesting thing you read 18 months (or 2 months!) ago that was related to this project."
  },
  {
    "objectID": "para-system.html#the-para-system-in-practice",
    "href": "para-system.html#the-para-system-in-practice",
    "title": "1  Overview of the PARA system",
    "section": "1.1 The PARA system in practice",
    "text": "1.1 The PARA system in practice\nTiago Forte’s PARA acronym stands for: Projects, Areas, Resources, and Archive. This system is not strictly hierarchical, but each category from front to back in PARA is given precedence over the last. That is because the underlying philosophy is that projects should produce end outputs or deliverables. Things that are not yet projects, or are larger than a single project are more nebulous, but not any less valuable.\nUsing the PARA system requires you to set up high level folders (I would suggest in the Documents directory of your computer) for each of the PARA categories: Projects, Areas, Resources, and Archive. Then, all of your professional work, and eventually some of your personal work and interests will nest under these.\nDeciding what is a “Project” vs an “Area” vs a “Resource” vs an “Archive” is probably the most important part of this workflow and drives everything else, so I will start there. One simple way to think about this is that when you need to consider where something should go in this system start at the beginning - if its doesn’t fit into the definition of a “Project”, then move down and see if it fits into the definition of an “Area”. If it is not an “Area”, then it will likely be a “Resource” unless it is something completed or inactive, in which case it goes in the “Archive”."
  },
  {
    "objectID": "para-system.html#what-is-a-project-how-should-i-name-my-projects",
    "href": "para-system.html#what-is-a-project-how-should-i-name-my-projects",
    "title": "1  Overview of the PARA system",
    "section": "1.2 What is a Project? How should I name my Projects?",
    "text": "1.2 What is a Project? How should I name my Projects?\n\n1.2.1 Defining Projects - How to Determine if Something is a Project\nThis seems like a trivial question but defining project boundaries in research can be difficult. Where does one project end and another begin? Does a project include multiple sub projects?\nA project is something you are involved in that has a discrete, definable end state or product. Note that our definition of projects here means they are flat. There should not be multiple projects nested under other projects. Each project is a discrete entity - this alings with GitHub repository organization (as we will see in future chapters), which allows deep integration. In our line of work, examples would be:\n\nA thesis chapter; see below for why a thesis or dissertation itself is actually larger than a Project - it is an Area\nA manuscript\nA grant might be a project, but is usually better defined as an Area (because these days all grants are collaborative) with multiple projects underneath. Also, because most grants actually have multiple end products such as reports and manuscripts.\nReports to stakeholders on unpublished data.\nX Are conference presentations nested in here? No - they are not projects but nested under projects.\nX Photos are nested and linked to projects in the GitHub readme file\n\n\n\n1.2.2 Naming Projects\nThis is a general style guide for naming projects (in the context of files or folder structures). Projects may have very long actual names (or you may not even know what, exactly the name of your project or project idea will eventually be). This doesn’t matter for the purposes of project setup. For now, we just need a two to three word abbreviated title for the project that we will use in our folder structure. For example, I am working on a manuscript called “Techniques for Field Identification of the Permafrost Table” - but the three words in the project name in my folder structure are: permafrost, table, ID. Here is a style guide for naming your projects:\n\nUse all lowercase letters and short dashes instead of spaces.\nProject names should start with your initials.\nProjects should be designated as M (for manuscript, including thesis chapters, which should each be a publishable unit), P (for proposal), or C (for communications such as reports) depending on the type of the end output.\nProjects should be given a two digit number (with a leading zero for any project numbers under 10) - these are just given in sequence as you create projects - so your first project is 01 - the order doesn’t matter.\nProjects should have a unique two to three word abbreviated name that is different from other projects you are working on.\n\nYour final project name is a combination of these four components as follows. Lets say I wanted to create a project structure for the “Techniques for Field Identification of the Permafrost Table” manuscript I am working on, and lets say it is the 9th project in my directory.\nMy project name is then Initials-TypeNumber-Word1-Word2-Word3. So, the project name for my manuscript would be:\nNAJ-M09-permafrost-table-ID"
  },
  {
    "objectID": "para-system.html#what-is-an-area-how-should-i-name-my-areas",
    "href": "para-system.html#what-is-an-area-how-should-i-name-my-areas",
    "title": "1  Overview of the PARA system",
    "section": "1.3 What is an Area? How should I name my Areas?",
    "text": "1.3 What is an Area? How should I name my Areas?\n\n1.3.1 Defining Areas - How to Determine if Something is an Area\nAreas are larger and more nebulous to define than projects, and they are also recurring and don’t necessarily have an endpoint (although they might have milestones or deliverables nested within them). The following are examples of Areas:\n\nTeaching a course.\nGrants. Although grants do have a definable end state, they should still be areas because they are highly collaborative and typically have multiple projects under them.\nAnnual reviews or summaries\nX Other examples?\n\n\n\n1.3.2 Naming Areas\nArea names can be a bit more general than project names. They can also be hierarchical, but they should still be numbered. A01-teaching is an area. Within that is a specific course, which would also have its own folder. “A01-teaching/umn-soil-2125”, finally a syllabus project would nest under the area: “A01-teaching/umn-soil-2125/syllabus”. Note that thise would not get it’s own project in the PARA method because a course syllabus could be recurring. Grants also get areas."
  },
  {
    "objectID": "para-system.html#what-is-a-resource-how-should-i-name-my-resources",
    "href": "para-system.html#what-is-a-resource-how-should-i-name-my-resources",
    "title": "1  Overview of the PARA system",
    "section": "1.4 What is a Resource? How should I name my Resources?",
    "text": "1.4 What is a Resource? How should I name my Resources?\n\n1.4.1 Defining Resources - How to Determine if Something is a Resource\nResources are things you actively, continuously refer to but that fall outside of projects and areas. Resources examples are:\n\nA note that contains all accounting codes\nA folder of templates for email responses to common inquiries\nAn actively maintained or growing list of books to read\nYour CV\n\n\n\n1.4.2 Naming Resources\nResource names can also be quite general and can also be numbered. They should start with “R”. An example would be “R01-accounting”, which could include a note that had all of the EFS strings you use, etc."
  },
  {
    "objectID": "para-system.html#what-is-the-archive",
    "href": "para-system.html#what-is-the-archive",
    "title": "1  Overview of the PARA system",
    "section": "1.5 What is the Archive?",
    "text": "1.5 What is the Archive?\nThe archive is for anything that doesn’t fit into the first three categories. This could be individual files such as unmaintained or inactive lists, or completed projects and areas that are no longer relevant to the work you are doing. Whole folders can be moved from the previous three categories into Archive."
  },
  {
    "objectID": "para-system.html#example-folder-structure",
    "href": "para-system.html#example-folder-structure",
    "title": "1  Overview of the PARA system",
    "section": "1.6 Example folder structure",
    "text": "1.6 Example folder structure\nHere is an example folder structure on my computer\n\n./Documents\n\n/00-projects\n\n/M03-nayabeda-P\n/M04-pb-distributions\n/M05-platy-e-horizons\n/M06-cryoturbation-review\n/M07-gelisol-classification-change\n/M08-cold-soils-chapter\n/M09-permafrost-table-id\n\n/01-areas\n\n/A01-teaching\n\n/umn-soil-2125\n\n/syllabus\n\n\n/A02-editing\n\n/permafrost-periglacial-processes\n\n/A03-student-support\n\n/undergrad-advising\n/recommendation-letters\n\n/A04-grants\n\n/nrcs-aksdb\n\n/A05-general-accounting\n\n/02-resources\n\n/R01-personal\n/R02-literature-notes\n/R03-email-responses\n\n/03-archive\n\n/M01-crb-gelisols\n/M02-us-eroded-soils\n\n\n\n# note that presentations go in the project or area subdirectory that they are associated with. Presentation folders should start with “P0X” and also include the year and venue. So if I gave a presentation at the Soil Science Sciety of America meetings in 2017 on a particular project, and it was the first presentation that I gave under that project, my subdirectory containing all of the relevant things for that presentation would be “P01-2017-SSSA”"
  },
  {
    "objectID": "para-system.html#why-do-this",
    "href": "para-system.html#why-do-this",
    "title": "1  Overview of the PARA system",
    "section": "1.7 Why do this?",
    "text": "1.7 Why do this?\nAt this point you are thinking this seems overly complicated. Why should I bother doing this, and why set up an unneccessarily strange and “computer” looking folder structure when I can just have folders named like “My Soil Project 2018”? I know what that is and I only have one project right now anyway…\nIf you are early in your career, this may seem unneccessary. But I can promise you this is actually the perfect time to start. This folder structure allows you to do four things:\n\ncreate a publicly available repository out of any one of your directories at anytime with little to no work\nshare your folder with anyone in our lab group (or anyone who reads this workflow document) who with little further direction will be able to understand your files and where to locate things\nmaintain an increasingly complex and growing list of projects and areas as you move forward in your career with little to no headache\nspend little to no time finding exactly what you are looking for. As you grow this system, the numbers associated with particular projects will become secondhand nature - “oh that manuscript is M07”.\nas you complete projects or certain areas are no longer relevant to your job, you can move whole folders into the archive without compromising your ability to find things. Note, in the example above, how two manuscript folders (M01 and M02) have been moved to the archive. They retain the numbers I associated with them when I was working on them."
  },
  {
    "objectID": "project-subfolder-structure.html",
    "href": "project-subfolder-structure.html",
    "title": "2  Project Subfolder Structure",
    "section": "",
    "text": "This workflow is based around projects as discrete scientific entities, so we will spend some time here describing how the subdirectory within any single project can be set up in a standardized way.\nNote that within the PARA-adapted system, a project is anything that is in your Projects directory as a stand-alone folder (these would be projects which will be finalized and not further revised, like a thesis or a paper), but could also be something nested under an “Area” (for projects that may be living, such as course syllabi), or a deliverable under a grant.\nChallenge here - how to deal with grants as areas, but have projects which are maybe manuscripts organized around grant deliverables? Think through GitHub Organization vs “Project” structure for AKSDB.\nSetting up this standardized project subfolder structure will allow you to have a place to put everything related to your project in a clear way, without having to think extensively about where something should go. Note: not every project is the same, so you may have some subfolders which are empty for some projects, but that is totally fine! Keep the empty folders - you never know when you may need them. If they are empty thats fine!"
  },
  {
    "objectID": "project-subfolder-structure.html#example-standardized-subfolder-structure-for-a-project",
    "href": "project-subfolder-structure.html#example-standardized-subfolder-structure-for-a-project",
    "title": "2  Project Subfolder Structure",
    "section": "2.1 Example Standardized Subfolder Structure for a Project",
    "text": "2.1 Example Standardized Subfolder Structure for a Project\nThis standardized structure is my own, modified from the following [insert sources].\n\n./M09-permafrost-table-id\n\n/00-data-raw\n/01-data\n/02-src\n\n[M09-permafrost-table-id.Rproj] will initiate in section X\n\n/03-cache\n/04-temp\n/05-docs\n\n/drafts\n/submitted\n/final-and-proofs\n/figures\n/tables\n/refs\n\n/06-presentations\n/07-log\n\n/analysis-log\n/writing-log\n\n/08-archive\n/09-books\n[readme.txt]\n[TODOs.txt]\n\n\nNote that what I dodn’t use here was -lib or -libs and -tests\nANOTHER NOTE #todo - Git will automatically not create subfolders if there are no files in them!!! - That is actually very useful for this workflow but bears on my documentation and instructions for the metadata template - should add some text about that."
  },
  {
    "objectID": "project-subfolder-structure.html#what-do-each-of-these-folders-mean-and-what-should-i-put-in-them",
    "href": "project-subfolder-structure.html#what-do-each-of-these-folders-mean-and-what-should-i-put-in-them",
    "title": "2  Project Subfolder Structure",
    "section": "2.2 What Do Each of These Folders Mean and What Should I Put in Them?",
    "text": "2.2 What Do Each of These Folders Mean and What Should I Put in Them?\nAlthough this list may seem daunting at first, each of these folders has a purpose, and this structure allows for deep integration with transparent data curation and data analysis workflows using R. Some of these folders may remain empty for the duration of your project and that is just fine! Note that each of the folders have a number convention for quick association once you start using this standardized structure. The numbers also allow for the folders to be arranged in a logical order, rather than alphabetically.\n\n2.2.1 /00-data-raw\nThis folder contains your curated raw data: unmodified, comprehensive, containing outliers, missing values, imperfections and other items that may be removed in data pre-processing. Insert link to data pre-processing chapter. It also contains any foundational geospatial data from other authors/sources that you did not generate but that you are pulling in for the purposes of analysis and that needs further processing to be utilized in your workflow. For example if an external data source came in a proprietary format that needed to be exported and modified. Note - need to create a subfolder separate for this, and also need to have a way to track origin and authorship - probably a readme or metadata file .txt or something - can be a running open file that is added to - maybe a markdown or something?\nAny raw data that you generated should be in open and easily readable formats. Specifically:\n\nTabular data should be in .csv format\nSpatial vector data (points, lines or polygons) should be in OGC geopackage format.\n\nAny data in raw data that is not your own should be in an /external-sources subdirectory which contains a metadata file that details the source of each of the external data sources.\n\n\n2.2.2 /01-data\nThis folder is the sink where all of your post-processed data will live. It also contains any foundational geospatial data from other authors/sources that you did not generate but that you are pulling in for the purposes of analysis following any necessary processing to change formats - note that this can include reprojected data, etc? actually maybye it shouldn’t because all of that can go into an R script - hmm need to think about this. Note - need to create a subfolder separate for this, and also need to have a way to track origin and authorship - probably a readme or metadata file .txt or something - can be a running open file that is added to - maybe a markdown or something? Data should be in open and easily readable formats. Specifically:\n\nTabular data should be in .csv format\nSpatial vector data (points, lines or polygons) should be in OGC geopackage format.\nSpatial raster data should be in GeoTIFF format.\n\nAny data in that is not your own should be in an /external-sources subdirectory which contains a metadata file that details the source of each of the external data sources.\n\n\n2.2.3 /02-src\nThis folder contains all of your source code and R scripts that you use to conduct your data processing and analysis. Note link to how to actually write and breakdown and organize scripts and analysis in projects - this can be in your R style guide or as a separate section - talk about sequential numbering, a master script, functions script, global script, readme, and how to renumber or keep your growing scripts squared away. This folder should always contain a .Rproj file to initialize the environment for running your R scripts.\n\n\n2.2.4 /03-cache\nYour cache folder may not be used often. However it is there to provide a storage place for any large objects or data that take a very long time to generate initially in a script. When these are generated once, they can be exported to this folder - this provides a shortcut for subsequent running of the scripts that saves time. People can still run your original scripts to generate these objects if they so choose.\n\n\n2.2.5 /04-temp\nThe temp folder is basically to hold any temporary non-important files, such as tests script outputs, test figures, etc. These are not important to the overall analysis. This folder should be empty and not be included in your final project using [.gitignore] file.\n\n\n2.2.6 /05-docs\nThis folder houses everything related to manuscripts or reports resulting from the project. It has subfolders for holding drafts, submitted versions (inclduign subsequent revisions), final and proofs, figures, tables, and references (which contains a single .bib file - ideally exported from your Zotero project folder which matches the name of this project).\n\n\n2.2.7 /06-presentations\nThis folder should contain subfolders for each presentation realted to the topic. Subfolders should start with “P0X” and also include the year and venue. So if I gave a presentation at the Soil Science Sciety of America meetings in 2017 on a particular project, and it was the first presentation that I gave under that project, my subdirectory containing all of the relevant things for that presentation would be “P01-2017-SSSA”.\n\n\n2.2.8 /07-log\nThis folder contains logs related to your project, specifically your analysis log and writing log. You can choose to make these public or not. See this section for how to write and construct logs - do it at the end of every day/session - take the 5 MINUTES!!!\n\n\n2.2.9 /08-archive\nThis folder contains anything that is not relevant to the current workflow but that you are not ready to delete permanently yet. Items can be moved to the archive folder at any time.\n\n\n2.2.10 /09-book\nIf you choose to create a book to consolidate your metadata and readmes, all relevant files should go in this subdirectory. More information on generating an html book from separate markdown files here.\n\n\n2.2.11 readme.txt\nThis is arguably one of the most important features of your entire project. The readme should always be in plain text .txt format so that anyone on any system can read it. Spending time on your readme file is extremely important:\n\nIt is the first writing you will do on your project and helps you to describe at a high level what your project is about\nIt is the file that tells everyone the who, what, when where, why, and how of this project:\n\nwho created this project?\nwhat is in this project?\nwhen was it created?\nwhere can i find relevant data, files, and documents within the project structure?\nwhy was this project done; what was the motivation?\nhow should I use these project files; what are the file formats, what programs do I need to run or access them; how were these files created and using what tools?\n\n\nA readme is a living document. You should begin any project with a draft readme, which, provided you use this workflow and file structure can be mostly copied from a suggested template located in this section. However, as your project grows and changes, your readme should be updated. Be as thorough as possible. Note that this is a project level readme. Although not required, you should strongly consider including sub readmes at within multipl subfolders where necessary. Conversely, you can create a project level book in Quarto that contains all readmes and documentation (see section X). More information on how to use and write a readme in section X.\n\n\n2.2.12 TODOs.txt\nThis is a running list of TODOs - actually this shouldn’t be a thing. You should use GitHub Issues to track this? Not sure need to look into this more."
  },
  {
    "objectID": "writing-readmes.html",
    "href": "writing-readmes.html",
    "title": "3  Writing Readmes - Your First Assignment",
    "section": "",
    "text": "Writing in your project actually begins with adding content to the readme.txt file. This is the human-readable part of your project metadata, and should be as descriptive and narrative as possible.\nThe readme is arguably one of the most important features of your entire project. It forms a cornerstone of the metadata catalog for the entire project see metadata section #todo and what is metadata #todo and metadata components #todo. The readme should always be in plain text .txt format so that anyone on any system can read it and it is as futureproof as possible. Spending time on your readme file is extremely important:\n\nIt is the first writing you will do on your project and helps you to describe at a high level what your project is about\nIt is the file that tells everyone the who, what, when where, why, and how of this project:\n\nwho created this project?\nwhat is in this project?\nwhen was it created?\nwhere can i find relevant data, files, and documents within the project structure?\nwhy was this project done; what was the motivation?\nhow should I use these project files; what are the file formats, what programs do I need to run or access them; how were these files created and using what tools?\n\n\nA readme is a living document. You should begin any project with a draft readme, which, provided you use this workflow and file structure can be mostly copied from a suggested template located in this section. However, as your project grows and changes, your readme should be updated. Be as thorough as possible. Note that this is a project level readme. Although not required, you can consider including sub readmes at within multipl subfolders where necessary. Conversely, you can create a project level book in Quarto that contains all readmes and documentation (see section X). More information on how to use and write a readme in section X."
  },
  {
    "objectID": "writing-readmes.html#suggested-template",
    "href": "writing-readmes.html#suggested-template",
    "title": "3  Writing Readmes - Your First Assignment",
    "section": "3.2 Suggested Template",
    "text": "3.2 Suggested Template\nThe following text is an example readme template to populate the readme for your project when you first initialize the directory. It is also contained in the file in the /Resources folder of this repo called readme-template.txt. It is adapted from Cornell University Research Data Management Service Group.\n\nThis readme file was generated on [YYYY-MM-DD] by [NAME]  <[text in square brackets should be changed for your specific dataset]>\nGENERAL INFORMATION\nTitle of Dataset:\n Author/Principal Investigator Information Name: ORCID: Institution: Address: Email:\nAuthor/Associate or Co-investigator Information Name: ORCID: Institution: Address: Email:\nAuthor/Alternate Contact Information Name: ORCID: Institution: Address: Email:\nDates of data collection: <provide single date, range, or approximate date; suggested format YYYY-MM-DD>\nGeographic location of data collection: <provide latitude, longiude bounding box, or city/region, State, Country>\nFunding sources: <include funding source and grant or agreemnet number, title and date range if applicable>.\nSHARING/ACCESS INFORMATION\nLicenses/restrictions placed on the data:\nLinks to publications that cite or use the data:\nLinks to other publicly accessible locations of the data:\nLinks/relationships to ancillary data sets:\nWas data derived from another source? If yes, list source(s):\nRecommended citation for this dataset:\nDATA & FILE OVERVIEW\nFile List: <list all files (or folders, as appropriate for dataset organization) contained in the dataset, with a brief description, organize this by subfolder>\nNOTE: You may not see every subfolder listed here. By default, Git does not push subfolders that do not contain at least one file to the repository. Therefore, if you do not see one of the below listed folders, assume that there were no files in the folder at the time of the push.\n\n/00-data-raw this folder contains the curated raw data: unmodified, comprehensive, containing outliers, missing values, imperfections and other items that may be removed in data pre-processing. It also contains any foundational geospatial data from other authors or sources that were not generated as part of this project but were used in data analysis. Source information for external data provided below <- list files>\n/01-data This folder contains all post-processed data used for analysis. It also contains foundational geospatial data from other authors/sources following any necessary processing to change formats <- list files>\n/02-src This folder contains all of your source code and R scripts that were used to conduct data processing and analysis, and includes a .Rproj file to initialize the environment prior to running the scripts. <- list files>\n/03-cache This folder contains any large files generated as part of data analysis, which can be optionally used from this directory to save time running scripts. <- list files>\n/04-temp This folder is left purposely empty - it was used during analysis as a repository for temporary or experimental files.\n/05-docs This folder holds everything related to manuscripts or reports resulting from the project. It has subfolders for holding drafts, submitted versions (inclduign subsequent revisions), final and proofs, figures, tables, and references (contained in a single .bib file). <- list files>\n/06-presentations This folder contains a subfolder for each presentation given on this project. <- list files>\n/07-log This folder contains data analysis and writing logs <- list files>\n/08-archive This folder may be left purposely empty. If it is not empty, it contains anything that is not relevant to the current workflow but that was not permanently deleted; may not be well organized\n/09-books This folder contains all files for generating a published, project level book in html or pdf form. This is hosted on GitHub Pages #NOTE this should be generated in both html and pdf form to ensure maximum readability. See section X #todo for how to build and generate a book. <- list files>\n[readme.txt] YOU ARE READING THIS NOW!\n[TODOs.txt]\n\nRelationship between files, if important:\nAdditional related data collected that was not included in the current data package:\nAre there multiple versions of the dataset? If yes, name of file(s) that was updated: Why was the file updated? When was the file updated?\nMETHODOLOGICAL INFORMATION\nDescription of methods used for collection/generation of data:  NOTE that a simple way to to this is to provide a link to our laboratory protocols or field protocols book, or to also put independent copies of them in the repo and/or just include that in your own project Quarto book #todo\nMethods for processing the data: \nInstrument- or software-specific information needed to interpret the data: <include full name and version of software, and any necessary packages or libraries needed to run scripts>\nStandards and calibration information, if appropriate:\nEnvironmental/experimental conditions:\nDescribe any quality-assurance procedures performed on the data:\nPeople involved with sample collection, processing, analysis and/or submission:\nDATA-SPECIFIC INFORMATION FOR: [FILENAME] <repeat this section for each dataset in the 00-raw-data and 01-data folders, folder or file, as appropriate>\nNumber of variables:\nNumber of cases/rows:\nVariable List: <list variable name(s), description(s), unit(s) and value labels as appropriate for each>\nMissing data codes: \nSpecialized formats or other abbreviations used:"
  },
  {
    "objectID": "writing-readmes.html#references",
    "href": "writing-readmes.html#references",
    "title": "3  Writing Readmes - Your First Assignment",
    "section": "3.3 References",
    "text": "3.3 References\nCornell University Research Data Management Service Group: Guide to writing “readme” style metadata."
  },
  {
    "objectID": "summary.html",
    "href": "summary.html",
    "title": "4  Summary",
    "section": "",
    "text": "1 + 1\n\n[1] 2"
  }
]